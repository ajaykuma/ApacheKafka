Annotations:
-------------
@RestController: responsible for handling all incoming client requests and delegates it to the 
appropriate service methods depending on URI pattern of the respective request.

It combines @Controller and @ResponseBody which eliminates the need to annotate every request
handling method of the controller class with the @ResponseBody annotation.

To Annotate the method with respective GET call REST type we can use Mappings & draft URL pattern
@GetMappings("employee/name")

For example:

package com.example.kafka;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class NewEmployeeController {
	
	@GetMapping("employee/name")
	public String getEmployeeName() {
		return "Aj";
	}

}

Open browser to test: http://localhost:8080/employee/name

===========
@Component: 
Modify implementation above to display name coming from the service class.
Using @Component we can add objects to our Application Context

Once we register NewEmployee service bean into the spring application context
, we can then use bean anywhere in the application.

For example:
package com.example.kafka;

import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;

@Component
public class NewEmployeeService {

	/*creating sample method*/
	@GetMapping("employee/name")
	public String getEmployeeName() {
		return "Aj";
}}

Now we can autowire our service into our controller, using @AutoWired annotation.
@Autowired : enables us to inject the object dependency implicitly.It internally uses setter or
constructor injection.
Note** Autowired cannot be used to inject primtive or string values, it works only with references.


Now editing controller:
package com.example.kafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class NewEmployeeController {
	
	@Autowired
	NewEmployeeService newEmployeeService;
	
	@GetMapping("employee/name")
	public String getEmployeeName() {
		return newEmployeeService.getEmployeeName();
	}

}

================
@Value: this gives us a convenient way to inject property values into Spring component
(environment variables/values from external world such as spring cloud config server)
package com.example.kafka;

package com.example.kafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class NewEmployeeController {
	
	@Value("${employee.experience:No experience}")
	String employeeExperience;
	
	@Autowired
	NewEmployeeService newEmployeeService;
	
	@GetMapping("employee/name")
	public String getEmployeeName() {
		return "Employee name is:   "   + newEmployeeService.getEmployeeName() + "   " +
				"Employee experience is:   "+employeeExperience;
		
	}

}

To Test:
Also add new property in 'application.properties'
employee.experience=20

==============
@ComponentScan & @Configuration @EnableAutoConfiguration
These are combined into @SprintBootApplication which is present on top of main class
of every spring boot application

When we dont use @ComponentScan explicitly anywhere in application, by default
spring boot scans all the beans under the base package.
i.e. say 'com.example.kafka'

If spring could not recognize any bean, it would complain
'Consider defining a bean ....'

Create a new package and then a class..
'com.newpackage'
>class: ComponentScanTest
package com.newpackage;

import org.springframework.stereotype.Component;

@Component
public class ComponentScanTest {
	
	public void hello() {
		System.out.println("Hello Test");
	}

}

Now add this to our Controller
package com.example.kafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.newpackage.ComponentScanTest;

@RestController
public class NewEmployeeController {
	
	@Value("${employee.experience:No experience}")
	String employeeExperience;
	
	
	@Autowired
	NewEmployeeService newEmployeeService;
	
	@Autowired
	ComponentScanTest componentScanTest;
	
	@GetMapping("employee/name")
	public String getEmployeeName() {
		return "Employee name is:   "   + newEmployeeService.getEmployeeName() + "   " +
				"Employee experience is:   "+employeeExperience;
		
	}
	@GetMapping("employee")
	public String hello() {		 
		componentScanTest.hello();
		return newEmployeeService.getEmployeeName();
		
	}

}
----
run the app
***************************
APPLICATION FAILED TO START
***************************

Description:

Field componentScanTest in com.example.kafka.NewEmployeeController required a bean of type 'com.newpackage.ComponentScanTest' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.newpackage.ComponentScanTest' in your configuration.

To make sure spring recognizes,we need to add @ComponentScan explicitly

Thus make changes---
package com.example.kafka;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@ComponentScan({"com.example.kafka","com.newpackage"})
@SpringBootApplication
public class KafkaApplication {

	public static void main(String[] args) {
		SpringApplication.run(KafkaApplication.class, args);
	}

}
========
@Configuration
on Application start, spring creates the application context that stores all the necessary dependencies
so that they can be wired whenever and wherver needed
Spring refers these dependencies as beans.

Note**configuration class informs spring to create a new 'xxxx' object and 
@Bean informs spring to add the returned class to ApplicationContext
Then this object can be injected anywhere in application.

Create a custom configuration class
package com.example.kafka;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfiguration {

	//create a custom bean
	 
	@Bean
	EmployeeStatus getEmployeeStatus() {
		return new EmployeeStatus();
	}
}

and then ..
we can autowire to our service
package com.example.kafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;

@Component
public class NewEmployeeService {

	@Autowired
	EmployeeStatus employeeStatus;
	
	/*creating sample method*/
	@GetMapping("employee/name")
	public String getEmployeeName() {
		return "Aj";
		}
    
	
}
---------------




