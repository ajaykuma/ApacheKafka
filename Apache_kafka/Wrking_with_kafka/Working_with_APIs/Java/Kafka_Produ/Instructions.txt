Instructions:

Task 1:
----------
#use spring initializer
spring initializer > https://start.spring.io/
Project: Maven Project
Language: Java
Spring Boot: 2.5.4
Project Metadata
Group: com.example.kafka
Artifact: KafkaApplication
Name: KafkaApplication
Description: Building producer app
Package name: com.example.kafka.KafkaApplication

Packaging: Jar
Java: 8

Dependencies:
Spring Web
Spring Boot DevTools
Spring for Apache Kafka
Spring for Apache Kafka Streams

click on generate and download the zip folder
unzip the folder
-----------
eclipse> import maven projects > KafkaApplication
----------
setup your eclipse
Note** Your project might show a small yellow alert symbol
right click on project > build path > Java Build Path > Libraries 
--while JRE System library is selected > click on edit
--select 'workspace default jre '(points to your jdk on machine)

-----------
#In project >
src/main/java shows your package
expand package to find your main application:KafkaApplication

>KafkaApplication.java
----
package com.example.kafka;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class KafkaApplication {

	public static void main(String[] args) {
		SpringApplication.run(KafkaApplication.class, args);
	}

}
----
#Create TestController for your application
>TestController.java
----
package com.example.kafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("kafka") /*making kafka as controller*/
public class TestController {

	@Autowired
	private KafkaTemplate<String, String> kafkaTemplate;
	private static final String TOPIC = "Topic1";
	
	@GetMapping("/publish/{message}")
	public String post(@PathVariable("message") final String message) {
		
		kafkaTemplate.send(TOPIC, message);
		return "Published successfully";
		
	}
}
----
Note** src>main>resources>application.properties file contains one entry
server=8080

#Now we can test this application
--start a local kafka cluster (on windows/linux)
--create a topic 'Topic1'
for example on windows:
C:\Users\Win10\Downloads\kafka\kafka_2.11-2.2.1\bin\windows>kafka-topics.bat 
--create --topic Topic1 --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1

--Run your application as 'java application'

--open browser and type:
http://localhost:8080/kafka/publish/msg1
http://localhost:8080/kafka/publish/msg2
http://localhost:8080/kafka/publish/msg3

--Test if your data was published to topic
C:\Users\Win10\Downloads\kafka\kafka_2.11-2.2.1\bin\windows>kafka-console-consumer.bat
 --topic Topic1 --from-beginning --bootstrap-server localhost:9092

If all fine, you have a spring boot application that can publish data to your topic in kafka.

Task 2:
#To publish JSON data 
#create a json model

#in your project, create a package 'model' i.e. com.example.kafka.model
#create a class 'User.java'
----
package com.example.kafka.model; /*this has constructors,getters and setters*/

public class User {
	private String name;
	private String dept;
	private Long salary;
	
	public User(String name, String dept, Long salary) {
		this.setName(name);
		this.setDept(dept);
		this.setSalary(salary);
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDept() {
		return dept;
	}

	public void setDept(String dept) {
		this.dept = dept;
	}

	public Long getSalary() {
		return salary;
	}

	public void setSalary(Long salary) {
		this.salary = salary;
	}
	
}
----
#Now edit the controller

edited TestController.java
-----
package com.example.kafka;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("kafka") /*making kafka as controller*/
public class TestController {

	@Autowired
	private KafkaTemplate<String, User> kafkaTemplate;
	private static final String TOPIC = "Topic1";
	
	@GetMapping("/publish/{name}")
	public String post(@PathVariable("name") final String name) {
		
		kafkaTemplate.send(TOPIC, new User(name,"Research",100000L));
		return "Published successfully";
		
	}
}
-----

To handle JSON objects lets create configs
#In your project, create a package 'config' i.e. com.example.kafka.config
#create a class 'KafkaConfiguration.java'

----
package com.example.kafka.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import com.example.kafka.model.User;

/*to be loaded during spring-boot initialization*/
@Configuration
public class KafkaConfiguration {
	
	/*creating a bean*/
	@Bean
	public ProducerFactory<String, User> producerFactory() {
		Map<String, Object> config = new HashMap<>();
		config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
				
		return new DefaultKafkaProducerFactory<>(config);
	}
	@Bean
	public KafkaTemplate<String, User> kafkaTemplate(){
		return new KafkaTemplate<>(producerFactory());
}}
 
----
#once model, configuration is created and TestController is edited, run the application
#open the browser and try
http://localhost:8080/kafka/publish/Aj

#check using consumer
C:\Users\Win10\Downloads\kafka\kafka_2.11-2.2.1\bin\windows>kafka-console-consumer.bat --topic Topic1 --from-beginning --bootstrap-server localhost:9092
test1
test2
msg3
{"name":"Aj","dept":"Research","salary":100000}





